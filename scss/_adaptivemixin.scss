// 1200 px ширина по макету
//padding: calc(20px + (50 - 20) * ((100vw - 320px) / (1200 - 320)));
// 20px - min padding value on 320px width screen which we want to see, (50 - 20) - изначальное значение padding по макету минус конечное значение (которое хотим увидеть или оно установлено в адаптиве макета), (100vw - 320px) - от ширины viewport отнимаем минимальную ширину экрана, (1200 - 320) - максимальная ширина страницы по макету минус минимальный размер экрана

//пишем запросы, в .container max-width: 1200px - по макету прописано ДОЛЖНО БЫТЬ!!!!!!!!

@media (max-width: 1200px) {
  &__body {
    padding: calc(20px + (50 - 20) * ((100vw - 320px) / (1200 - 320)));
  }
}

@media (min-width: 1200px) {
  &__body {
    padding: calc(20px + (50 - 20) * ((100vw - 320px) / (1200 - 320)));
  }
}

// пишем в CSS свойствах напрямую, в .container max-width: 1200px - по макету прописано НЕ ДОЛЖНО БЫТЬ!!!!!!!!

&__body {
  padding: calc(20px + (50 - 20) * ((100vw - 320px) / (1200 - 320)));
}

// mixin in SCSS styles

$maxWidth: 1900; //max размер экрана, подкотрый будем расширять макетное значение
$maxWidthContainer: 1200; // макетное значение

@mixin adaptiv-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type == 1 {
    //только если меньше контейнера
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - 320px) / #{$maxWidthContainer - 320})
      );
    }
  } @else if ($type == 2) {
    //только если больше контейнера
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    // всегда
    #{$property}: calc(
      #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}

// mixin in CSS styles

.dvwdvhd__body {
  @include adaptiv-value("padding", 50, 20, 0);
}
